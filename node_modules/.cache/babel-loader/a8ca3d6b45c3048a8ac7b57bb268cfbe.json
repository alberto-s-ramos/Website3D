{"ast":null,"code":"'use strict';\n/**\r\n * @module  color-interpolate\r\n * Pick color from palette by index\r\n */\n\nconst parse = require('color-parse');\n\nconst hsl = require('color-space/hsl');\n\nconst lerp = require('lerp');\n\nconst clamp = require('clamp');\n\nmodule.exports = interpolate;\n\nfunction interpolate(palette) {\n  palette = palette.map(function (c) {\n    c = parse(c);\n\n    if (c.space != 'rgb') {\n      if (c.space != 'hsl') throw 'c.space' + 'space is not supported.';\n      c.values = hsl.rgb(c.values);\n    }\n\n    c.values.push(c.alpha);\n    return c.values;\n  });\n  return function (t, mix) {\n    mix = mix || lerp;\n    t = clamp(t, 0, 1);\n    var idx = (palette.length - 1) * t,\n        lIdx = Math.floor(idx),\n        rIdx = Math.ceil(idx);\n    t = idx - lIdx;\n    var lColor = palette[lIdx],\n        rColor = palette[rIdx];\n    var result = lColor.map(function (v, i) {\n      v = mix(v, rColor[i], t);\n      if (i < 3) v = Math.round(v);\n      return v;\n    });\n\n    if (result[3] === 1) {\n      return 'rgb(' + result.slice(0, 3) + ')';\n    }\n\n    return 'rgba(' + result + ')';\n  };\n}","map":{"version":3,"sources":["/Users/alberto.ramos/Documents/Personal/GitHub/Website3D/node_modules/color-interpolate/index.js"],"names":["parse","require","hsl","lerp","clamp","module","exports","interpolate","palette","map","c","space","values","rgb","push","alpha","t","mix","idx","length","lIdx","Math","floor","rIdx","ceil","lColor","rColor","result","v","i","round","slice"],"mappings":"AAAA;AAEA;;;;;AAKA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,iBAAD,CAAnB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AAEAI,MAAM,CAACC,OAAP,GAAiBC,WAAjB;;AAEA,SAASA,WAAT,CAAsBC,OAAtB,EAA+B;AAC9BA,EAAAA,OAAO,GAAGA,OAAO,CAACC,GAAR,CAAY,UAASC,CAAT,EAAY;AACjCA,IAAAA,CAAC,GAAGV,KAAK,CAACU,CAAD,CAAT;;AACA,QAAIA,CAAC,CAACC,KAAF,IAAW,KAAf,EAAsB;AACrB,UAAID,CAAC,CAACC,KAAF,IAAW,KAAf,EAAsB,MAAM,YAAY,yBAAlB;AACtBD,MAAAA,CAAC,CAACE,MAAF,GAAWV,GAAG,CAACW,GAAJ,CAAQH,CAAC,CAACE,MAAV,CAAX;AACA;;AACDF,IAAAA,CAAC,CAACE,MAAF,CAASE,IAAT,CAAcJ,CAAC,CAACK,KAAhB;AACA,WAAOL,CAAC,CAACE,MAAT;AACA,GARS,CAAV;AAUA,SAAO,UAASI,CAAT,EAAYC,GAAZ,EAAiB;AACvBA,IAAAA,GAAG,GAAGA,GAAG,IAAId,IAAb;AACAa,IAAAA,CAAC,GAAGZ,KAAK,CAACY,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT;AAEA,QAAIE,GAAG,GAAG,CAAEV,OAAO,CAACW,MAAR,GAAiB,CAAnB,IAAyBH,CAAnC;AAAA,QACCI,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAYJ,GAAZ,CADR;AAAA,QAECK,IAAI,GAAGF,IAAI,CAACG,IAAL,CAAWN,GAAX,CAFR;AAIAF,IAAAA,CAAC,GAAGE,GAAG,GAAGE,IAAV;AAEA,QAAIK,MAAM,GAAGjB,OAAO,CAACY,IAAD,CAApB;AAAA,QAA4BM,MAAM,GAAGlB,OAAO,CAACe,IAAD,CAA5C;AAEA,QAAII,MAAM,GAAGF,MAAM,CAAChB,GAAP,CAAW,UAASmB,CAAT,EAAYC,CAAZ,EAAe;AACtCD,MAAAA,CAAC,GAAGX,GAAG,CAACW,CAAD,EAAIF,MAAM,CAACG,CAAD,CAAV,EAAeb,CAAf,CAAP;AACA,UAAIa,CAAC,GAAG,CAAR,EAAWD,CAAC,GAAGP,IAAI,CAACS,KAAL,CAAWF,CAAX,CAAJ;AACX,aAAOA,CAAP;AACA,KAJY,CAAb;;AAMA,QAAID,MAAM,CAAC,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACpB,aAAO,SAAOA,MAAM,CAACI,KAAP,CAAa,CAAb,EAAe,CAAf,CAAP,GAAyB,GAAhC;AACA;;AACD,WAAO,UAAQJ,MAAR,GAAe,GAAtB;AACA,GAtBD;AAuBA","sourcesContent":["'use strict'\r\n\r\n/**\r\n * @module  color-interpolate\r\n * Pick color from palette by index\r\n */\r\n\r\nconst parse = require('color-parse');\r\nconst hsl = require('color-space/hsl');\r\nconst lerp = require('lerp');\r\nconst clamp = require('clamp');\r\n\r\nmodule.exports = interpolate;\r\n\r\nfunction interpolate (palette) {\r\n\tpalette = palette.map(function(c) {\r\n\t\tc = parse(c);\r\n\t\tif (c.space != 'rgb') {\r\n\t\t\tif (c.space != 'hsl') throw 'c.space' + 'space is not supported.';\r\n\t\t\tc.values = hsl.rgb(c.values);\r\n\t\t}\r\n\t\tc.values.push(c.alpha);\r\n\t\treturn c.values;\r\n\t});\r\n\r\n\treturn function(t, mix) {\r\n\t\tmix = mix || lerp;\r\n\t\tt = clamp(t, 0, 1);\r\n\r\n\t\tvar idx = ( palette.length - 1 ) * t,\r\n\t\t\tlIdx = Math.floor( idx ),\r\n\t\t\trIdx = Math.ceil( idx );\r\n\r\n\t\tt = idx - lIdx;\r\n\r\n\t\tvar lColor = palette[lIdx], rColor = palette[rIdx];\r\n\r\n\t\tvar result = lColor.map(function(v, i) {\r\n\t\t\tv = mix(v, rColor[i], t);\r\n\t\t\tif (i < 3) v = Math.round(v);\r\n\t\t\treturn v;\r\n\t\t});\r\n\r\n\t\tif (result[3] === 1) {\r\n\t\t\treturn 'rgb('+result.slice(0,3)+')';\r\n\t\t}\r\n\t\treturn 'rgba('+result+')';\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"script"}