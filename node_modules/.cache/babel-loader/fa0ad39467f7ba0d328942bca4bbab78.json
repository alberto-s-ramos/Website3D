{"ast":null,"code":"import _slicedToArray from \"/Users/alberto/Projects/Personal/Website3D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/alberto/Projects/Personal/Website3D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/alberto/Projects/Personal/Website3D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alberto/Projects/Personal/Website3D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { calculateBounds } from \"tsparticles-engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils\";\nexport var BounceOutMode = /*#__PURE__*/function () {\n  function BounceOutMode(container) {\n    _classCallCheck(this, BounceOutMode);\n\n    this.container = container;\n    this.modes = [\"bounce\", \"bounce-vertical\", \"bounce-horizontal\", \"bounceVertical\", \"bounceHorizontal\", \"split\"];\n  }\n\n  _createClass(BounceOutMode, [{\n    key: \"update\",\n    value: function update(particle, direction, delta, outMode) {\n      if (!this.modes.includes(outMode)) {\n        return;\n      }\n\n      var container = this.container;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (handled) {\n        return;\n      }\n\n      var pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n      bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }]);\n\n  return BounceOutMode;\n}();","map":null,"metadata":{},"sourceType":"module"}