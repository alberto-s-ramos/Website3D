{"ast":null,"code":"var _jsxFileName = \"/Users/alberto.ramos/Documents/Personal/GitHub/Website3D/src/components/Points.js\";\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { useFrame, useLoader } from 'react-three-fiber';\nimport glowingOrb from '../assets/glowingorb2.png';\nimport * as THREE from 'three';\n\nfunction Points() {\n  const imageTexture = useLoader(THREE.TextureLoader, glowingOrb);\n  const bufferedRef = useRef();\n  let t = 0;\n  let f = 0.002;\n  let a = 1.5;\n  const graph = useCallback((x, z) => {\n    return Math.sin(f * (x ** 2 + z ** 2 + t)) * a;\n  }, [t, f, a]);\n  const count = 60; // number of point accross 1 axis\n\n  const sep = 3; // separation between each point\n\n  let positions = useMemo(() => {\n    let positions = [];\n\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n        let y = graph(x, z);\n        positions.push(x, y, z);\n      }\n    }\n\n    return new Float32Array(positions);\n  }, [count, sep, graph]);\n  useFrame(() => {\n    t += 15;\n    const positions = bufferedRef.current.array;\n    let i = 0;\n\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n        positions[i + 1] = graph(x, z);\n        i += 3;\n      }\n    }\n\n    bufferedRef.current.needsUpdate = true;\n  });\n  return /*#__PURE__*/React.createElement(\"points\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", {\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    ref: bufferedRef,\n    attachObject: ['attributes', 'position'],\n    array: positions,\n    count: positions.length / 3,\n    itemSize: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"pointsMaterial\", {\n    attach: \"material\",\n    map: imageTexture,\n    color: 0xFFFFFF,\n    size: .6,\n    sizeAttenuation: true,\n    transparent: false,\n    alphaTest: .1,\n    opacity: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Points;","map":{"version":3,"sources":["/Users/alberto.ramos/Documents/Personal/GitHub/Website3D/src/components/Points.js"],"names":["React","useCallback","useMemo","useRef","useFrame","useLoader","glowingOrb","THREE","Points","imageTexture","TextureLoader","bufferedRef","t","f","a","graph","x","z","Math","sin","count","sep","positions","xi","zi","y","push","Float32Array","current","array","i","needsUpdate","length"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef } from 'react';\nimport { useFrame, useLoader } from 'react-three-fiber'\nimport glowingOrb from '../assets/glowingorb2.png'\nimport * as THREE from 'three'\n\nfunction Points(){\n    const imageTexture = useLoader(THREE.TextureLoader, glowingOrb)\n    const bufferedRef = useRef() \n  \n    let t = 0;\n    let f = 0.002;\n    let a = 1.5;\n    const graph = useCallback((x,z) => {\n      return Math.sin(f * ( x ** 2 + z ** 2 + t)) * a;\n    }, [t,f,a])\n  \n  \n    const count = 60 // number of point accross 1 axis\n    const sep = 3 // separation between each point\n  \n    let positions = useMemo(() => {\n      let positions = []\n  \n      for(let xi = 0; xi < count; xi++){\n        for(let zi = 0; zi < count; zi++){\n          let x = sep * (xi - count/2)\n          let z = sep * (zi - count/2)\n          let y = graph(x,z)\n          positions.push(x,y,z)\n        }\n      } \n      return new Float32Array(positions);\n    }, [count, sep, graph])\n  \n    useFrame(()=>{\n      t += 15\n      const positions = bufferedRef.current.array\n      let i = 0;\n      for(let xi = 0; xi < count; xi++){\n        for(let zi = 0; zi < count; zi++){\n          let x = sep * (xi - count/2)\n          let z = sep * (zi - count/2)\n          positions[i+1]= graph(x,z)\n          i+=3;\n        }\n      } \n      bufferedRef.current.needsUpdate=true \n    })\n  \n    return(\n      <points>\n        <bufferGeometry attach=\"geometry\">\n          <bufferAttribute\n            ref={bufferedRef}\n            attachObject={['attributes', 'position']}\n            array={positions}\n            count={positions.length/3}\n            itemSize={3}\n          />\n        </bufferGeometry>\n  \n        <pointsMaterial \n          attach=\"material\"\n          map={imageTexture}\n          color={0xFFFFFF}\n          size={.6}\n          sizeAttenuation\n          transparent={false}\n          alphaTest={.1}\n          opacity={1}\n          />\n     \n      </points>\n    )\n  }\n\n  export default Points"]},"metadata":{},"sourceType":"module"}